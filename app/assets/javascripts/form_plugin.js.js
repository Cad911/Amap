// Generated by CoffeeScript 1.2.1-pre
(function() {

  $.fn.form_plugin = function(optn) {
    var champ, champ_opt, functions, options, valeur, _ref, _ref1, _ref2, _ref3, _ref4;
    options = {
      user_id: $('input.user_id').val(),
      table_get_infos: '',
      table_to_update: '',
      champ: [],
      titre: (_ref = optn.titre) != null ? _ref : 'Titre',
      id_entite_get_infos: '',
      id_entite_update: '',
      element: {
        type: (_ref1 = optn['element']['type']) != null ? _ref1 : 'input',
        options: {
          value: optn['element']['options'] !== void 0 ? optn['element']['options']['value'] : [],
          text: optn['element']['options'] !== void 0 ? optn['element']['options']['text'] : []
        }
      },
      "class": 'string optional',
      button: {
        "class": optn['button'] !== void 0 ? (_ref2 = optn['button']['class']) != null ? _ref2 : 'update_element' : 'update_element',
        text_update: optn['button'] !== void 0 ? (_ref3 = optn['button']['text_update']) != null ? _ref3 : 'Modifier' : 'Modifier'
      },
      callback: (_ref4 = optn.callback) != null ? _ref4 : null
    };
    champ_opt = optn['champ'].split(',');
    for (champ in champ_opt) {
      valeur = champ_opt[champ];
      options.champ.push($.trim(valeur));
    }
    functions = {
      input_create: [],
      show_form: function(donnees) {
        var attribut, attribut_input, champ, d, data_, i, valeur_champ, _ref5;
        attribut = {
          hidden_input: {
            balise: 'input',
            id: options.table_to_update + '_id',
            value: donnees[options.table_to_update]['id'],
            size: '50',
            type_input: 'hidden',
            name: options.table + '[id]'
          },
          link: {
            "class": options.button["class"],
            text: options.button.text_update
          },
          input: []
        };
        _ref5 = options.champ;
        for (champ in _ref5) {
          valeur_champ = _ref5[champ];
          attribut_input = {
            balise: options['element']['type'],
            id: options.table_to_update + '_' + valeur_champ,
            value: donnees[options['table_to_update']][valeur_champ],
            size: '50',
            type_input: 'text',
            name: options.table_to_update + '[' + valeur_champ + ']',
            "class": 'string optional',
            option: []
          };
          attribut['input'].push(attribut_input);
          if (attribut_input['balise'] === 'select') {
            attribut.input[champ].option = [];
            i = 0;
            data_ = [];
            while (i < options['element']['options']['value'].length) {
              d = {
                value: options['element']['options']['value'][i],
                text: options['element']['options']['text'][i]
              };
              attribut.input[champ].option.push(d);
              i++;
            }
          }
        }
        functions.generate_form(attribut);
        return window.light_box_information.show();
      },
      generate_form: function(attribut) {
        var a, champ, data_, form, hidden_input, input, offset_lightbox_input, span, span_annuler, span_infos, valeur, _ref5;
        window.light_box_information.html_content('');
        window.light_box_information.header_content('');
        hidden_input = $(document.createElement(attribut['hidden_input']['balise']));
        hidden_input.attr('id', attribut['hidden_input']['id']);
        hidden_input.attr('name', attribut['hidden_input']['name']);
        hidden_input.val(attribut['hidden_input']['value']);
        hidden_input.attr('type', attribut['hidden_input']['type_input']);
        hidden_input.addClass(attribut['hidden_input']['class']);
        functions.input_create = [];
        form = $(document.createElement('form'));
        form.addClass('form-horizontal');
        _ref5 = attribut['input'];
        for (champ in _ref5) {
          valeur = _ref5[champ];
          data_ = {
            type_element: valeur['balise'],
            label: {
              text: options.titre
            },
            input: {
              value: valeur['value'],
              name: valeur['name'],
              "class": valeur['class'],
              id: valeur['id'],
              other_attributes: []
            }
          };
          if (valeur['balise'] === 'input') {
            data_.input.other_attributes.push(['type', valeur['type_input']]);
            data_.input.other_attributes.push(['size', valeur['size']]);
          } else if (valeur['balise'] === 'textarea') {
            data_.input.other_attributes.push(['cols', valeur['size']]);
          } else if (valeur['balise'] === 'select') {
            data_.input.options = valeur.option;
          }
          input = window.global_functions.standard_input(data_);
          form.append(input);
          functions.input_create.push(input.find(valeur['balise']));
        }
        window.light_box_information.append_content(form);
        window.light_box_information.append_content(hidden_input);
        if (attribut['span_infos']) {
          span_infos = $(document.createElement('span'));
          span_infos.text(attribut['span_infos']['text']);
          window.light_box_information.append_content(span_infos);
        }
        span = $(document.createElement('span'));
        span.addClass('button');
        a = $(document.createElement('a'));
        a.addClass(attribut['link']['class']);
        a.text(attribut['link']['text']);
        span.append(a);
        span_annuler = window.light_box_information.create_annuler();
        offset_lightbox_input = $('.lightbox_wrapper.lightbox_information .form-horizontal .controls').position();
        options.left += offset_lightbox_input.left;
        window.light_box_information.css({
          'margin': 'Opx',
          top: options.top + 'px',
          left: options.left + 'px',
          position: 'absolute'
        });
        window.light_box_information.html_footer(span_annuler);
        window.light_box_information.append_footer(span);
        return span.on('click', function() {
          return functions.update_information(this);
        });
      },
      get_information: function() {
        var user_id;
        user_id = $('input.user_id').val();
        return $.ajax({
          type: 'GET',
          url: options.the_url_get_infos,
          format: 'json',
          complete: function(data) {
            var informations;
            informations = $.parseJSON(data['responseText']);
            if (informations['status'] === 'OK') {
              return informations;
            } else {
              return alert(informations['error']);
            }
          }
        });
      },
      update_information: function(button) {
        var champ, data, id_entite, tab_concerned, user_id, val, valeur, value_to_show, _ref5, _results;
        user_id = $('input.user_id').val();
        value_to_show = '';
        _ref5 = functions.input_create;
        _results = [];
        for (champ in _ref5) {
          valeur = _ref5[champ];
          tab_concerned = options.table_to_update;
          id_entite = options.id_entite_update;
          champ = options.champ[champ];
          val = $(valeur).val();
          data = {};
          data[tab_concerned] = {};
          data[tab_concerned][champ] = val;
          value_to_show += ' ' + val;
          if (val !== '') {
            _results.push($.ajax({
              type: 'PUT',
              url: options.the_url_to_update,
              data: data,
              format: 'json',
              complete: function(data) {
                var element_for_text, informations;
                informations = $.parseJSON(data['responseText']);
                if (informations['status'] === 'OK') {
                  if ($(options.element_clicked).children('span.value').length > 0) {
                    element_for_text = $(options.element_clicked).children('span.value');
                  } else if ($(options.element_clicked).children('span.number').length > 0) {
                    element_for_text = $(options.element_clicked).children('span.number');
                  } else {
                    element_for_text = options.element_clicked;
                  }
                  if (options.element.type === 'select') {
                    $(element_for_text).text($(valeur).children("option[value='" + val + "']").text());
                  } else {
                    $(element_for_text).text($.trim(value_to_show));
                  }
                  window.light_box_information.hide();
                  return $(options.element_clicked).trigger('end_form_plugin');
                } else {
                  return window.message_information.message_error('input#' + $(valeur).attr('id'), 'erreur', informations['error'], 5000);
                }
              }
            }));
          } else {
            _results.push(window.message_information.message_error('input#' + $(valeur).attr('id'), 'erreur', 'le champ ' + champ + ' est vide', 5000));
          }
        }
        return _results;
      }
    };
    return this.each(function() {
      return $(this).bind('click', function() {
        var champ_lvl, i, offset, offset_left, offset_lightbox_left, offset_lightbox_top, offset_top, scroll_top, that;
        if ($(this).hasClass('is-editing')) {
          options.element_clicked = this;
          offset_lightbox_top = $(window).height() * 0.5;
          offset_lightbox_left = $(window).width() * 0.5;
          offset = $(this).offset();
          scroll_top = $(document).scrollTop();
          console.log(scroll_top);
          offset_top = parseInt(offset.top) - scroll_top - offset_lightbox_top;
          offset_left = parseInt(offset.left) - offset_lightbox_left;
          options.top = offset_top;
          options.left = offset_left;
          console.log(options);
          if (optn.url_to_update === void 0) {
            optn.url_to_update = optn.url_get_infos;
          }
          options.table_get_infos = optn.url_get_infos[optn.url_get_infos.length - 1];
          options.table_to_update = optn.url_to_update[optn.url_to_update.length - 1];
          options.id_entite_get_infos = $(this).parents('div').prevAll('div.informations_card').children('input.id_' + options.table_get_infos).val();
          options.id_entite_update = $(this).parents('div').prevAll('div.informations_card').children('input.id_' + options.table_to_update).val();
          options.the_url_get_infos = '/administration';
          options.the_url_to_update = '/administration';
          if (optn.url_get_infos !== void 0) {
            options.url_get_infos = {};
            i = 0;
            while (i < optn.url_get_infos.length) {
              champ_lvl = 'level_' + i;
              options.url_get_infos[champ_lvl] = optn.url_get_infos[i];
              if (i === 0) {
                options.the_url_get_infos += '/' + optn.url_get_infos[i] + 's/' + options.user_id;
              } else {
                options.the_url_get_infos += '/' + optn.url_get_infos[i] + 's/' + options.id_entite_get_infos;
              }
              i++;
            }
          }
          options.url_to_update = {};
          i = 0;
          while (i < optn.url_to_update.length) {
            champ_lvl = 'level_' + i;
            options.url_to_update[champ_lvl] = optn.url_to_update[i];
            if (i === 0) {
              options.the_url_to_update += '/' + optn.url_to_update[i] + 's/' + options.user_id;
            } else {
              options.the_url_to_update += '/' + optn.url_to_update[i] + 's/' + options.id_entite_update;
            }
            i++;
          }
          that = this;
          $.when(functions.get_information()).done(function(data) {
            return functions.show_form(data);
          });
          return this;
        }
      });
    });
  };

}).call(this);
